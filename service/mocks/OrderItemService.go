// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/prabhav-keyvalue/order-management-go/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// OrderItemService is an autogenerated mock type for the OrderItemService type
type OrderItemService struct {
	mock.Mock
}

// CreateOrderItemsWithOrder provides a mock function with given fields: createOrderItemsInput, tx
func (_m *OrderItemService) CreateOrderItemsWithOrder(createOrderItemsInput []entity.OrderItem, tx *gorm.DB) ([]entity.OrderItem, error) {
	ret := _m.Called(createOrderItemsInput, tx)

	var r0 []entity.OrderItem
	if rf, ok := ret.Get(0).(func([]entity.OrderItem, *gorm.DB) []entity.OrderItem); ok {
		r0 = rf(createOrderItemsInput, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]entity.OrderItem, *gorm.DB) error); ok {
		r1 = rf(createOrderItemsInput, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderItemsByIds provides a mock function with given fields: orderItemIds, tx
func (_m *OrderItemService) DeleteOrderItemsByIds(orderItemIds []string, tx *gorm.DB) error {
	ret := _m.Called(orderItemIds, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, *gorm.DB) error); ok {
		r0 = rf(orderItemIds, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrderItemsByOrderId provides a mock function with given fields: orderId, tx
func (_m *OrderItemService) DeleteOrderItemsByOrderId(orderId string, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, orderId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...*gorm.DB) error); ok {
		r0 = rf(orderId, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderItemsByOrderId provides a mock function with given fields: orderId, tx
func (_m *OrderItemService) GetOrderItemsByOrderId(orderId string, tx *gorm.DB) ([]entity.OrderItem, error) {
	ret := _m.Called(orderId, tx)

	var r0 []entity.OrderItem
	if rf, ok := ret.Get(0).(func(string, *gorm.DB) []entity.OrderItem); ok {
		r0 = rf(orderId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *gorm.DB) error); ok {
		r1 = rf(orderId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderItemQuantity provides a mock function with given fields: orderItem, tx
func (_m *OrderItemService) UpdateOrderItemQuantity(orderItem entity.OrderItem, tx *gorm.DB) error {
	ret := _m.Called(orderItem, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.OrderItem, *gorm.DB) error); ok {
		r0 = rf(orderItem, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderItemService creates a new instance of OrderItemService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemService(t testing.TB) *OrderItemService {
	mock := &OrderItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
