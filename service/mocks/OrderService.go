// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/prabhav-keyvalue/order-management-go/dto"
	entity "github.com/prabhav-keyvalue/order-management-go/entity"

	mock "github.com/stretchr/testify/mock"

	model "github.com/prabhav-keyvalue/order-management-go/model"

	testing "testing"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: createOrderInput
func (_m *OrderService) CreateOrder(createOrderInput dto.CreateOrderInputDto) (entity.Order, error) {
	ret := _m.Called(createOrderInput)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(dto.CreateOrderInputDto) entity.Order); ok {
		r0 = rf(createOrderInput)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateOrderInputDto) error); ok {
		r1 = rf(createOrderInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: orderId
func (_m *OrderService) DeleteOrder(orderId string) error {
	ret := _m.Called(orderId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditOrder provides a mock function with given fields: editOrderInput
func (_m *OrderService) EditOrder(editOrderInput dto.EditOrderInputDto) (entity.Order, error) {
	ret := _m.Called(editOrderInput)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(dto.EditOrderInputDto) entity.Order); ok {
		r0 = rf(editOrderInput)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.EditOrderInputDto) error); ok {
		r1 = rf(editOrderInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: id
func (_m *OrderService) GetOrderById(id string) (entity.Order, error) {
	ret := _m.Called(id)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(string) entity.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: orderFilterParams, paginationInput, sortOptions
func (_m *OrderService) GetOrders(orderFilterParams dto.OrderFilterParams, paginationInput dto.PaginationParams, sortOptions dto.SortOptions) ([]entity.Order, model.PageInfo, error) {
	ret := _m.Called(orderFilterParams, paginationInput, sortOptions)

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) []entity.Order); ok {
		r0 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	var r1 model.PageInfo
	if rf, ok := ret.Get(1).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) model.PageInfo); ok {
		r1 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		r1 = ret.Get(1).(model.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) error); ok {
		r2 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOrderService creates a new instance of OrderService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderService(t testing.TB) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
