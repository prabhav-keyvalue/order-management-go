// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/prabhav-keyvalue/order-management-go/dto"
	entity "github.com/prabhav-keyvalue/order-management-go/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/prabhav-keyvalue/order-management-go/model"

	testing "testing"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: orderInput, tx
func (_m *OrderRepository) CreateOrder(orderInput entity.Order, tx *gorm.DB) (entity.Order, error) {
	ret := _m.Called(orderInput, tx)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(entity.Order, *gorm.DB) entity.Order); ok {
		r0 = rf(orderInput, tx)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Order, *gorm.DB) error); ok {
		r1 = rf(orderInput, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: orderId, tx
func (_m *OrderRepository) DeleteOrder(orderId string, tx ...*gorm.DB) error {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, orderId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...*gorm.DB) error); ok {
		r0 = rf(orderId, tx...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditOrder provides a mock function with given fields: editOrderInput, tx
func (_m *OrderRepository) EditOrder(editOrderInput entity.Order, tx *gorm.DB) (entity.Order, error) {
	ret := _m.Called(editOrderInput, tx)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(entity.Order, *gorm.DB) entity.Order); ok {
		r0 = rf(editOrderInput, tx)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Order, *gorm.DB) error); ok {
		r1 = rf(editOrderInput, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: id
func (_m *OrderRepository) GetOrderById(id string) (entity.Order, error) {
	ret := _m.Called(id)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(string) entity.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: orderFilterParams, paginationInput, sortOptions
func (_m *OrderRepository) GetOrders(orderFilterParams dto.OrderFilterParams, paginationInput dto.PaginationParams, sortOptions dto.SortOptions) ([]entity.Order, model.PageInfo, error) {
	ret := _m.Called(orderFilterParams, paginationInput, sortOptions)

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) []entity.Order); ok {
		r0 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	var r1 model.PageInfo
	if rf, ok := ret.Get(1).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) model.PageInfo); ok {
		r1 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		r1 = ret.Get(1).(model.PageInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(dto.OrderFilterParams, dto.PaginationParams, dto.SortOptions) error); ok {
		r2 = rf(orderFilterParams, paginationInput, sortOptions)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t testing.TB) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
